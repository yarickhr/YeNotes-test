{"version":3,"sources":["components/Numeral.js","App.js","serviceWorker.js","index.js"],"names":["CASES","nominative","genitive","dative","accusative","instrumental","locative","Numeral","word","this","props","preposition","react_default","a","createElement","dangerouslySetInnerHTML","__html","locative_label","className","main_field_value","word_type","name","toLowerCase","explanations","general","length","abbr","number_formatted","Object","entries","map","_ref","i","arr","_ref2","slicedToArray","caseName","caseValue","key","Component","App","state","json","_this2","axios","defaults","baseURL","get","params","format","lang","then","response","setState","data","console","dir","catch","error","log","form_data","meta","result","words","Helmet_default","htmlAttributes","title","content","description","keywords","components_Numeral","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a90c680d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst CASES = {\n  'nominative': 'Називний',\n  'genitive': 'Родовий',\n  'dative': 'Давальний',\n  'accusative': 'Знахідний',\n  'instrumental': 'Орудний',\n  'locative': 'Місцевий',\n};\n\nclass Numeral extends Component {\n\n  render() {\n\n    let word = this.props.word;\n\n    let preposition = <span dangerouslySetInnerHTML={{__html: word && word.locative_label + ' '}} />;\n\n    return (\n      <main className=\"word\">\n\n        <div className=\"heading\">\n          <div className=\"word-title\">{word.main_field_value} ({word.word_type.name.toLowerCase()})</div>\n          <div className=\"word-explanation\">({word.explanations.general.length ? word.explanations.general : 'кількість'})</div>\n        </div>\n\n\n        <div className=\"row\">\n\n          <div className=\"side\">\n            <button className=\"active\">{word.main_field_value} ({word.word_type.abbr})</button>\n            <button className=\"\">{word.main_field_value} ({word.word_type.abbr}) ({word.number_formatted})</button>\n          </div>\n\n          <div className=\"table\">\n            <table>\n              <thead>\n                <tr>\n                  <th>Відмінки</th>\n                  <th>Чоловічий та середній</th>\n                  <th>Жіночий</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  Object.entries(CASES).map( ([caseName, caseValue], i, arr) => {\n                    return (<tr key={caseName}>\n                      <td>{caseValue}</td>\n                      <td>\n                        { i===arr.length-1 ?  preposition : '' }\n                        { word[caseName + \"_masculine\"] }\n                        { word[caseName + \"_masculine_another1\"] && \", \" + word[caseName + \"_masculine_another1\"] }\n                      </td>\n                      <td>\n                        { i===arr.length-1 ?  preposition : '' }\n                        { word[caseName + \"_feminine\"] }\n                        { word[caseName + \"_feminine_another1\"] && \", \" + word[caseName + \"_feminine_another1\"] }\n                      </td>\n                    </tr>)\n                  })\n                }\n              </tbody>\n            </table>\n          </div>\n\n        </div>\n\n\n      </main>\n    );\n  }\n}\n\nexport default Numeral;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Helmet from \"react-helmet\";\n\nimport 'normalize.css';\nimport './App.scss';\nimport Numeral from './components/Numeral'\n\nclass App extends Component {\n\n  state = {\n      json: {}\n    };\n\n\n  componentDidMount() {\n    axios.defaults.baseURL = 'http://www.api.yenotes.com';\n\n    axios.get('/words/conjugation/search/', {\n      params: {\n        format: 'json',\n        lang: 'uk',\n        word: 'два'\n      }\n    })\n      .then( response => {\n        this.setState({\n          json: response.data\n        });\n        console.dir(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      })\n      .then(function () {\n        // always executed\n      });\n  }\n\n  render() {\n\n    let form_data = this.state.json.form_data;\n    let meta = this.state.json.meta;\n    let result = this.state.json.result;\n    let word = result && result.words[0];\n\n    return (\n      <div className=\"page\">\n\n        <Helmet\n          htmlAttributes={{\"lang\": form_data ? form_data.lang : 'en' }}\n          title={meta ? meta.title : 'YeNotes'}\n          meta={[\n            {\"name\": \"description\", \"content\": meta && meta.description},\n            {\"name\": \"keywords\", \"content\": meta && meta.keywords}\n          ]}\n          />\n\n\n        <header></header>\n\n        <main className=\"main\">\n          {result && (\n            <Numeral word={word}/>\n          )}\n        </main>\n        <footer></footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}